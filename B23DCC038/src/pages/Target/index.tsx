import React, { useState, useEffect } from "react";
import { Card, InputNumber, Button, Select, Progress, message, Modal } from "antd";
import { Option } from "antd/es/mentions";

interface Subject {
  name: string;
  target: number;  // M·ª•c ti√™u h·ªçc t·∫≠p (ph√∫t)
  completed: number;  // Ti·∫øn ƒë·ªô ƒë√£ h·ªçc (ph√∫t)
}

const Target: React.FC = () => {
  const [selectedMonth, setSelectedMonth] = useState<string>(new Date().toISOString().slice(0, 7)); // "YYYY-MM"
  const [selectedSubject, setSelectedSubject] = useState<string>(""); 
  const [subjects, setSubjects] = useState<Subject[]>([]); 
  const [subjects2, setSubjects2] = useState<Subject[]>([]); 
  const [targetMinutes, setTargetMinutes] = useState<number>(0);
  const [completedHours, setCompletedHours] = useState<number>(0); 
  const [isModalVisible, setIsModalVisible] = useState<boolean>(false); // Qu·∫£n l√Ω tr·∫°ng th√°i c·ªßa Modal
  const [isDetailModalVisible, setIsDetailModalVisible] = useState<boolean>(false); // Modal chi ti·∫øt m√¥n h·ªçc
  const [currentSubject, setCurrentSubject] = useState<Subject | null>(null); // L∆∞u m√¥n h·ªçc hi·ªán t·∫°i khi xem chi ti·∫øt

  // Load danh s√°ch m√¥n h·ªçc t·ª´ localStorage khi component mount
  useEffect(() => {
    const storedSubjects = JSON.parse(localStorage.getItem("subjects") || "[]");
    setSubjects(Array.isArray(storedSubjects) ? storedSubjects : []);
  }, []);

  useEffect(() => {
    const storedSubjects = JSON.parse(localStorage.getItem("subjects2") || "[]");
    setSubjects2(Array.isArray(storedSubjects) ? storedSubjects : []);
  }, []);

  useEffect(() => {
    if (selectedSubject) {
      const storedSubjects = JSON.parse(localStorage.getItem("subjects") || "[]");
      const subject = storedSubjects.find((sub: Subject) => sub.name === selectedSubject);
      if (subject) {
        setTargetMinutes(subject.target);
        setCompletedHours(Math.floor(subject.completed / 60));
      }
    }
  }, [selectedSubject]);

  const handleSetGoal = () => {
    if (targetMinutes <= 0) {
      message.warning("M·ª•c ti√™u ph·∫£i l·ªõn h∆°n 0 ph√∫t!");
      return;
    }

    const storedSubjects = JSON.parse(localStorage.getItem("subjects2") || "[]");
    const existingSubject = storedSubjects.find((subject: Subject) => subject.name === selectedSubject);

    if (existingSubject) {
      message.warning("M√¥n h·ªçc n√†y ƒë√£ c√≥ m·ª•c ti√™u!");
      return;
    }

    const newSubject = { name: selectedSubject, target: targetMinutes, completed: completedHours * 60 };
    const updatedSubjects = [...storedSubjects, newSubject];
    localStorage.setItem("subjects2", JSON.stringify(updatedSubjects));

    setSubjects2(updatedSubjects);
    message.success(`ƒê√£ ƒë·∫∑t m·ª•c ti√™u ${targetMinutes} ph√∫t cho m√¥n h·ªçc ${selectedSubject}`);
    setIsModalVisible(false);
  };

  const handleUpdateProgress = (subjectName: string, minutes: number) => {
    if (minutes <= 0) {
      message.warning("S·ªë ph√∫t h·ªçc ph·∫£i l·ªõn h∆°n 0!");
      return;
    }

    const storedSubjects = JSON.parse(localStorage.getItem("subjects") || "[]");
    const updatedSubjects = storedSubjects.map((subject: Subject) => {
      if (subject.name === subjectName) {
        const newCompleted = subject.completed + minutes;
        return { ...subject, completed: newCompleted };
      }
      return subject;
    });

    localStorage.setItem("subjects", JSON.stringify(updatedSubjects));
    setSubjects(updatedSubjects);
  };

  const showModal = () => {
    setIsModalVisible(true);
  };

  const handleCancel = () => {
    setIsModalVisible(false);
    setIsDetailModalVisible(false);
  };

  const handleDeleteSubject = (subjectName: string) => {
    const storedSubjects = JSON.parse(localStorage.getItem("subjects2") || "[]");
    const updatedSubjects = storedSubjects.filter((subject: Subject) => subject.name !== subjectName);
    localStorage.setItem("subjects2", JSON.stringify(updatedSubjects));
    setSubjects2(updatedSubjects);
    message.success(`ƒê√£ x√≥a m√¥n h·ªçc ${subjectName}`);
  };

  const handleEditSubject = (subject: Subject) => {
    setSelectedSubject(subject.name);
    setTargetMinutes(subject.target);
    setCompletedHours(Math.floor(subject.completed / 60));
    setIsModalVisible(true);
  };

  const handleViewDetail = (subject: Subject) => {
    setCurrentSubject(subject);
    setIsDetailModalVisible(true);
  };

  const convertMinutesToHours = (minutes: number) => {
    const hours = Math.floor(minutes / 60);
    const remainingMinutes = minutes % 60;
    return `${hours} gi·ªù ${remainingMinutes} ph√∫t`;
  };

  return (
    <div>
      <Button type="primary" onClick={showModal}>
        T·∫°o k·∫ø ho·∫°ch h·ªçc t·∫≠p
      </Button>

      <Modal
        title="T·∫°o K·∫ø Ho·∫°ch H·ªçc T·∫≠p"
        visible={isModalVisible}
        onCancel={handleCancel}
        footer={null}
        width={500}
      >
        <Card title="üéØ Qu·∫£n l√Ω M·ª•c ti√™u H·ªçc t·∫≠p">
          <div style={{ marginBottom: 16 }}>
            <p><strong>Ch·ªçn th√°ng:</strong></p>
            <Select
              defaultValue={selectedMonth}
              onChange={(month) => setSelectedMonth(month)}
              style={{ width: "100%" }}
            >
              <Option value="2025-01">Th√°ng 1, 2025</Option>
              <Option value="2025-02">Th√°ng 2, 2025</Option>
            </Select>
          </div>

          <div style={{ marginBottom: 16 }}>
            <p><strong>Ch·ªçn m√¥n h·ªçc:</strong></p>
            <Select
              value={selectedSubject}
              onChange={(value) => setSelectedSubject(value)}
              style={{ width: "100%" }}
            >
              {subjects.map((subject) => (
                <Option key={subject.name} value={subject.name}>
                  {subject.name}
                </Option>
              ))}
            </Select>
          </div>

          <div style={{ marginBottom: 16 }}>
            <p><strong>Nh·∫≠p m·ª•c ti√™u h·ªçc t·∫≠p (ph√∫t):</strong></p>
            <InputNumber
              min={1}
              value={targetMinutes}
              onChange={(value) => setTargetMinutes(value || 0)} // S·ª≠a l·∫°i cho ph√π h·ª£p
              style={{ width: "100%" }}
            />
          </div>

          <div style={{ marginBottom: 16 }}>
            <p><strong>Nh·∫≠p s·ªë gi·ªù ƒë√£ h·ªçc:</strong></p>
            <InputNumber
              min={0}
              value={completedHours}
              onChange={(value) => setCompletedHours(value || 0)} // S·ª≠a l·∫°i cho ph√π h·ª£p
              style={{ width: "100%" }}
            />
          </div>

          <Button
            type="primary"
            onClick={handleSetGoal}
            style={{ marginTop: 8, width: "100%" }}
          >
            L∆∞u m·ª•c ti√™u
          </Button>
        </Card>
      </Modal>

      <Modal
        title="Chi Ti·∫øt M√¥n H·ªçc"
        visible={isDetailModalVisible}
        onCancel={handleCancel}
        footer={null}
      >
        {currentSubject && (
          <Card title={`Chi Ti·∫øt M√¥n H·ªçc: ${currentSubject.name}`}>
            <p><strong>M·ª•c ti√™u h·ªçc t·∫≠p:</strong> {currentSubject.target} ph√∫t</p>
            <p><strong>Ti·∫øn ƒë·ªô h·ªçc:</strong> {currentSubject.completed} ph√∫t ({convertMinutesToHours(currentSubject.completed)} ƒë√£ h·ªçc)</p>
          </Card>
        )}
      </Modal>

      <div>
        <h3>M√¥n h·ªçc hi·ªán t·∫°i:</h3>
        {subjects2.length === 0 ? (
          <p>Ch∆∞a c√≥ m√¥n h·ªçc n√†o.</p>
        ) : (
          <ul>
            {subjects2.map((subject) => (
              <li key={subject.name}>
                <strong>{subject.name}</strong> - M·ª•c ti√™u: {subject.target} ph√∫t
                <br />
                Ti·∫øn ƒë·ªô: {subject.completed} ph√∫t ({convertMinutesToHours(subject.completed)} ƒë√£ h·ªçc)
                <Progress percent={(subject.completed / subject.target) * 100} status={subject.completed >= subject.target ? "success" : "active"} />
                <Button onClick={() => handleViewDetail(subject)} style={{ marginLeft: 8 }}>
                  Xem Chi Ti·∫øt
                </Button>
                <Button onClick={() => handleEditSubject(subject)} style={{ marginLeft: 8 }}>
                  S·ª≠a
                </Button>
                <Button onClick={() => handleDeleteSubject(subject.name)} style={{ marginLeft: 8 }} danger>
                  X√≥a
                </Button>
              </li>
            ))}
          </ul>
        )}
      </div>
    </div>
  );
};
export default Target;
